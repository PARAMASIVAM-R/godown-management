import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import BarcodeScanner from "../components/BarcodeScanner";
import CompleteData from "../datas/all pds/CompleteData";
import "./PDSDashboard.css";

const itemList = [
  { id: 1, name: "Rice - General" },
  { id: 2, name: "Rice - AAY" },
  { id: 3, name: "Rice - PHH" },
  { id: 4, name: "Sugar" },
  { id: 5, name: "Wheat" },
  { id: 6, name: "Kerosene" },
  { id: 7, name: "Toor Dhall" },
  { id: 8, name: "Urad Dhall" },
  { id: 9, name: "Palm Oil" },
  { id: 10, name: "ANP Rice" },
  { id: 11, name: "OAP Rice" },
  { id: 12, name: "Fortified Rice" },
  { id: 13, name: "Masoor Dhal" },
  { id: 14, name: "Moong Dal" },
  { id: 15, name: "Bajra" },
  { id: 16, name: "Jowar" },
  { id: 17, name: "Maize" },
  { id: 18, name: "Salt" },
  { id: 19, name: "Ragi" },
  { id: 20, name: "Mustard Oil" },
  { id: 21, name: "Chana Dal" },
  { id: 22, name: "Besan (Gram Flour)" },
  { id: 23, name: "Atta (Wheat Flour)" },
  { id: 24, name: "Milk Powder" },
  { id: 25, name: "Soybean" },
  { id: 26, name: "Groundnut Oil" },
  { id: 27, name: "Jaggery" },
  { id: 28, name: "Tea Leaves" },
  { id: 29, name: "Coffee Powder" },
  { id: 30, name: "Green Gram" },
  { id: 31, name: "Pongal Rice" },
  { id: 32, name: "Pongal Jaggery" },
  { id: 33, name: "Pongal Ghee" },
  { id: 34, name: "Cashew Nuts" },
  { id: 35, name: "Raisins (Dry Grapes)" },
  { id: 36, name: "Cardamom" },
  { id: 37, name: "Pongal Moong Dal" },
];

const GodownDashboard = () => {
  const navigate = useNavigate();
  const [barcode, setBarcode] = useState("");
  const [decodedDataList, setDecodedDataList] = useState([]);
  const [data, setData] = useState(null);

  const decodeBarcode = (barcode) => {
    if (!barcode || barcode.length !== 23) {
      console.error("Invalid barcode length!");
      return null;
    }

    const districtCode = barcode.substring(0, 2);
    const godownCode = barcode.substring(2, 4);
    const pdsCode = barcode.substring(4, 7);
    const productCode = barcode.substring(7, 9);
    const weight = barcode.substring(9, 11);
    const date = barcode.substring(11, 13);
    const month = barcode.substring(13, 15);
    const year = barcode.substring(15, 19);
    const count = barcode.substring(19, 23);

    const districtData = CompleteData[districtCode];
    const district = typeof districtData === "string" 
      ? districtData 
      : districtData?.District_Name || "Unknown District";

    const godown = districtData?.Godowns?.[godownCode]?.Godown || "Unknown Godown";
    const pdsShop = districtData?.Godowns?.[godownCode]?.PDS_Shops?.[pdsCode] || "Unknown PDS Shop";
    const product = itemList.find((item) => item.id === parseInt(productCode))?.name || "Unknown Product";

    return {
      district,
      godown,
      pdsShop,
      product,
      weight: `${weight}kg`,
      date,
      month,
      year,
      count: parseInt(count),
      barcode, // Store the original barcode for duplicate checking
    };
  };

  const handleBarcodeScan = (scannedBarcode) => {
    if (scannedBarcode && scannedBarcode !== barcode) {
      setBarcode(scannedBarcode);

      // Check if the barcode already exists in decodedDataList
      const isDuplicate = decodedDataList.some((item) => item.barcode === scannedBarcode);
      if (isDuplicate) {
        console.log(`Duplicate barcode detected: ${scannedBarcode}`);
        return; // Skip adding if it's a duplicate
      }

      const decodedData = decodeBarcode(scannedBarcode);
      if (decodedData) {
        setDecodedDataList((prevData) => [...prevData, decodedData]);
      }
    }
  };

  useEffect(() => {
    const token = sessionStorage.getItem("token");

    const fetchData = async () => {
      try {
        const response = await fetch("http://localhost:5000/api/godown/dashboard", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error("Failed to fetch dashboard data");
        }

        const result = await response.json();
        setData(result);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (decodedDataList.length > 0) {
      console.log("Updated decodedDataList:", decodedDataList);
    }
  }, [decodedDataList]);

  return (
    <div className="containerr">
      <div className="dashboard_container">
        <h2>Godown Incharge Dashboard</h2>
        <div className="button-container">
          <button className="logout" onClick={() => navigate("/")}>
            Logout
          </button>
        </div>

        <div className="godown-details">
          <h3>Godown Incharge Details</h3>
          {data ? (
            <ul>
              <li>
                <strong>Incharge Name:</strong> {data.InchargeName || "N/A"}
              </li>
              <li>
                <strong>Godown Name:</strong> {data.godownName || "N/A"}
              </li>
              <li>
                <strong>District Name:</strong> {data.district || "N/A"}
              </li>
            </ul>
          ) : (
            <p>Loading details...</p>
          )}
        </div>

        <div className="scanner">
          <h4>Barcode Data</h4>
          {barcode && <p>Scanned Barcode: {barcode}</p>}
          <BarcodeScanner setScannedBarcode={handleBarcodeScan} />
        </div>

        <div className="transaction-history">
          <h2>Transaction History</h2>
          <table>
            <thead>
              <tr>
                <th>Product</th>
                <th>Weight (kg)</th>
                <th>Goods In Count</th>
                <th>Goods Out Count</th>
                <th>PDS ID</th>
                <th>Total Count</th>
                <th>Pending Count</th>
                <th>Date</th>
              </tr>
            </thead>
            <tbody>
              {data?.products?.length > 0 ? (
                data.products.map((product, index) => (
                  <tr key={index}>
                    <td>{product.productName || "N/A"}</td>
                    <td>{product.weight || "N/A"}</td>
                    <td>{product.goodsInCount || 0}</td>
                    <td>{product.goodsOutCount || 0}</td>
                    <td>{product.pdsId || "N/A"}</td>
                    <td>{product.totalCount || 0}</td>
                    <td>{product.pendingCount || 0}</td>
                    <td>{product.date || "N/A"}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="8">No transaction data available</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default GodownDashboard;




<div className="decoded-data">
  <h4>Decoded Barcodes</h4>
  <table>
    <thead>
      <tr>
        <th>Barcode</th>
        <th>District</th>
        <th>Godown</th>
        <th>PDS Shop</th>
        <th>Product</th>
        <th>Weight</th>
        <th>Date</th>
      </tr>
    </thead>
    <tbody>
      {decodedDataList.length > 0 ? (
        decodedDataList.map((data, index) => (
          <tr key={index}>
            <td>{data.barcode}</td>
            <td>{data.district}</td>
            <td>{data.godown}</td>
            <td>{data.pdsShop}</td>
            <td>{data.product}</td>
            <td>{data.weight}</td>
            <td>{`${data.date}/${data.month}/${data.year}`}</td>
          </tr>
        ))
      ) : (
        <tr>
          <td colSpan="7">No barcodes decoded yet</td>
        </tr>
      )}
    </tbody>
  </table>
</div>